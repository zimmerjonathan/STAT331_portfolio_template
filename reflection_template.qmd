---
title: "STAT 331 Portfolio"
author: "Jonathan Zimmer"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be a B-.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

lab 3 question 2

*I revised this section of code because I didn't load in the data using the here() function my first attempt.*

```{r}
#| label: wd-1-csv

my_data <- read.csv(here("data","teacher_evals.csv"))

```

-   `xlsx`

Practice activity 4 question 1

```{r}
#| label: wd-1-xlsx

military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip  = 6, 
                      n_max = 192)

```

-   `txt`

Practice Activity 5

```{r}
#| label: wd-1-txt

message_data <- read_csv("https://github.com/earobinson95/stat331-calpoly/raw/master/practice-activities/data/scrambled_message.txt")

```

**WD-2: I can select necessary columns from a dataset.**

lab 3 question 5

```{r}
#| label: wd-2

teacher_evals_clean <- my_data %>%
  rename(sex = gender) %>%
  filter(no_participants >= 10) %>%
  mutate(course_id = as.character(course_id),
         teacher_id = as.character(teacher_id)) %>%
  select(course_id, teacher_id, question_no, no_participants, resp_share, 
         SET_score_avg, percent_failed_cur, academic_degree, seniority, sex)

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

Lab 3 question 9

```{r}
#| label: wd-3-numeric

teacher_evals_clean %>%
  group_by(course_id, teacher_id) %>%
  summarise(n_questions = n_distinct(question_no)) %>%
  filter(n_questions == 9)

```

-   character -- specifically a string (example must use functions from **stringr**)

lab 5

*I revised this code to use stringr rather than grepl*

```{r}
#| label: wd-3-string

suspects <- drivers_license %>%
  filter(str_detect(plate_number, "H42W")) %>%
  left_join(person, by = c("id" = "license_id"))

```

-   factor

Lab 3 question 12

*I revised this code because I had only selected a single row equal to the highest and lowest. Both times i correctly filtered for a factor.*

```{r}
#| label: wd-3-factor


teacher_evals_clean %>%
  filter(sex == "female", academic_degree %in% c("dr", "prof")) %>%
  group_by(teacher_id) %>%
  summarise(avg_resp_share = mean(resp_share, na.rm = TRUE)) %>%
  arrange(desc(avg_resp_share)) %>%
  filter(avg_resp_share %in% c(max(avg_resp_share),min(avg_resp_share)))


```

-   date (example must use functions from **lubridate**)

Lab 5

*I revised this code to use the ymd function from lubridate*

```{r}
#| label: wd-3-date

crime_scene <- crime_scene_report %>%
  mutate(date = ymd(date)) %>%
  filter(type == "murder",
         date == ymd("20180115"),
         city == "SQL City")

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

Challenge 3 question 1

```{r}
#| label: wd-4-numeric

teacher_evals_compare <- teacher_evals_clean %>%
  filter(question_no == 903) %>%
  mutate(
    SET_level = if_else(SET_score_avg >= 4, "excellent", "standard"),
    sen_level = if_else(seniority <= 4, "junior", "senior")
  ) %>%
  select(course_id, SET_level, sen_level)

```

-   character -- specifically a string (example must use functions from **stringr**)

lab 4 question 3

```{r}
#| label: wd-4-string


ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(county_name,
                               # Region 1: Superior California
                               "Superior California" = c("Butte", "Colusa", "El Dorado", "Glenn", "Lassen", "Modoc", "Nevada", "Placer", "Plumas", "Sacramento", "Shasta", "Sierra", "Siskiyou", "Sutter", "Tehama", "Yolo", "Yuba"),
                               # Region 2: Del Norte, Humboldt, Lake, Mendocino, Napa, Sonoma, Trinity
                               "Del Norte and Northern Coast" = c("Del Norte", "Humboldt", "Lake", "Mendocino", "Napa", "Sonoma", "Trinity"),
                               # Region 3: San Francisco Bay Area
                               "San Francisco Bay Area" = c("Alameda", "Contra Costa", "Marin", "San Francisco", "San Mateo", "Santa Clara", "Solano"),
                               # Region 4: Northern San Joaquin Valley and Sierra
                               "Northern San Joaquin Valley" = c("Alpine", "Amador", "Calaveras", "Madera", "Mariposa", "Merced", "Mono", "San Joaquin", "Stanislaus", "Tuolumne"),
                               # Region 5: Central Coast
                               "Central Coast" = c("Monterey", "San Benito", "San Luis Obispo", "Santa Barbara", "Santa Cruz", "Ventura"),
                               # Region 6: Central Valley
                               "Central Valley" = c("Fresno", "Inyo", "Kern", "Kings", "Tulare"),
                               # Region 7: Inland Empire
                               "Inland Empire" = c("Riverside", "San Bernardino"),
                               # Region 8: Los Angeles
                               "Los Angeles" = c("Los Angeles"),
                               # Region 9: Orange
                               "Orange" = c("Orange"),
                               # Region 10: San Diego and Imperial
                               "San Diego Area" = c("Imperial", "San Diego")
  ))

```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor

#lab 4 question 3

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(county_name,
                               # Region 1: Superior California
                               "Superior California" = c("Butte", "Colusa", "El Dorado", "Glenn", "Lassen", "Modoc", "Nevada", "Placer", "Plumas", "Sacramento", "Shasta", "Sierra", "Siskiyou", "Sutter", "Tehama", "Yolo", "Yuba"),
                               # Region 2: Del Norte, Humboldt, Lake, Mendocino, Napa, Sonoma, Trinity
                               "Del Norte and Northern Coast" = c("Del Norte", "Humboldt", "Lake", "Mendocino", "Napa", "Sonoma", "Trinity"),
                               # Region 3: San Francisco Bay Area
                               "San Francisco Bay Area" = c("Alameda", "Contra Costa", "Marin", "San Francisco", "San Mateo", "Santa Clara", "Solano"),
                               # Region 4: Northern San Joaquin Valley and Sierra
                               "Northern San Joaquin Valley" = c("Alpine", "Amador", "Calaveras", "Madera", "Mariposa", "Merced", "Mono", "San Joaquin", "Stanislaus", "Tuolumne"),
                               # Region 5: Central Coast
                               "Central Coast" = c("Monterey", "San Benito", "San Luis Obispo", "Santa Barbara", "Santa Cruz", "Ventura"),
                               # Region 6: Central Valley
                               "Central Valley" = c("Fresno", "Inyo", "Kern", "Kings", "Tulare"),
                               # Region 7: Inland Empire
                               "Inland Empire" = c("Riverside", "San Bernardino"),
                               # Region 8: Los Angeles
                               "Los Angeles" = c("Los Angeles"),
                               # Region 9: Orange
                               "Orange" = c("Orange"),
                               # Region 10: San Diego and Imperial
                               "San Diego Area" = c("Imperial", "San Diego")
  ))

```

-   date (example must use functions from **lubridate**)

lab 5

*I revised this code to use the ymd() function from lubridate*

```{r}
#| label: wd-4-date

crime_scene <- crime_scene_report %>%
  mutate(date = ymd(date)) %>%
  filter(type == "murder",
         date == ymd("20180115"),
         city == "SQL City")

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

lab 4 question 2

```{r}
#| label: wd-5-left

ca_childcare <- childcare_costs %>%
  left_join(counties, by = c("county_fips_code" = "county_fips_code")) %>%
  filter(state_name == "California") %>%
  select(county_fips_code, study_year, mhi_2018, mc_infant, mc_toddler, mc_toddler, mc_preschool,
         names(counties))

```

-   `right_join()`

lab 5

```{r}
#| label: wd-5-right

mastermind <- person %>%
  full_join(drivers_license, by = c("license_id" = "id")) %>%
  right_join(facebook_event_checkin, by = c("id" = "person_id")) %>%
  filter(gender == "female", hair_color == "red", car_make == "Tesla", 
         car_model == "Model S", event_name == "SQL Symphony Concert")

```

-   `inner_join()`

lab 5

```{r}
#| label: wd-5-inner

witness_interviews <- interview %>%
  filter(person_id %in% witness_ids) %>%
  inner_join(person, by = c("person_id" = "id")) %>%
  select(name, person_id, transcript)

```

-   `full_join()`

lab 5

```{r}
#| label: wd-5-full

mastermind <- person %>%
  full_join(drivers_license, by = c("license_id" = "id")) %>%
  right_join(facebook_event_checkin, by = c("id" = "person_id")) %>%
  filter(gender == "female", hair_color == "red", car_make == "Tesla", 
         car_model == "Model S", event_name == "SQL Symphony Concert")

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

lab 5

*I revised this code to use a semi_join() to filter interviews for matching person_id. I learned that I can use semi_join() as a means of filtering*

```{r}
#| label: wd-6-semi

witness_interviews <- interview %>%
  semi_join(person, by = c("person_id" = "id")) %>% 
  inner_join(person, by = c("person_id" = "id")) %>% 
  filter(person_id %in% witness_ids) %>%
  select(name, person_id, transcript) 


```

-   `anti_join()`

Lab 5

*This was revision to include an anti_join(). i learned I can use anti_join to find differences in two tables*

```{r}
#| label: wd-6-anti

non_event_attendees <- person %>%
  anti_join(facebook_event_checkin, by = c("id" = "person_id"))


```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

lab 4 question 6

This code was revised but the revision did not have to do with using pivot_longer() correctly

```{r}
#| label: wd-7-long


ca_childcare %>%
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool), 
               names_to = "age_group", 
               values_to = "median_price") %>%
  mutate(age_group = fct_recode(age_group,
                                 "Infants" = "mc_infant",
                                 "Toddlers" = "mc_toddler",
                                 "Preschoolers" = "mc_preschool")) %>%
  mutate(age_group = fct_relevel(age_group, "Infants", "Toddlers", "Preschoolers")) %>%
  ggplot(aes(x = study_year, y = median_price, color = region)) +
  geom_line() +
  geom_point() +
  geom_smooth(method = "loess", se = FALSE) +
  facet_wrap(~ age_group, ncol = 3) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       subtitle = "Median Price",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_y_continuous(limits = c(100, 500)) + 
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  theme_bw() +
  theme(axis.text.x = element_text(size = 6))

```

-   `pivot_wider()`

lab 4 question 4

```{r}
#| label: wd-7-wide

income_change <- ca_childcare %>%
  filter(study_year %in% c(2008, 2018)) %>%
  group_by(region, study_year) %>%
  summarise(median_income = median(mhi_2018, na.rm = TRUE)) %>%
  pivot_wider(names_from = study_year, values_from = median_income, names_prefix = "year_") %>%
  arrange(desc(year_2018))
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments: Lab 2, lab 3

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

Lab 2 question 4

```{r}
#| label: r-2-1

ggplot(data = my_data,
       mapping = aes(x=weight, y=hindfoot_length)) +
  facet_wrap(~ species) +
  geom_point(alpha=0.5) + 
  labs(title = "Weight vs Hindfoot Length",
       x = "Weight (g)",
       y = "",
       subtitle = "Hindfoot Length (mm)")

```

-   Example of **dplyr** pipeline

lab 3 question 5

```{r}
#| label: r-2-2

teacher_evals_clean <- my_data %>%
  rename(sex = gender) %>%
  filter(no_participants >= 10) %>%
  mutate(course_id = as.character(course_id),
         teacher_id = as.character(teacher_id)) %>%
  select(course_id, 
         teacher_id, 
         question_no, 
         no_participants, 
         resp_share, 
         SET_score_avg, 
         percent_failed_cur, 
         academic_degree, 
         seniority, 
         sex)

```

-   Example of function formatting

lab 3 question 5

```{r}
#| label: r-2-3

teacher_evals_clean <- my_data %>%
  rename(sex = gender) %>%
  filter(no_participants >= 10) %>%
  mutate(course_id = as.character(course_id),
         teacher_id = as.character(teacher_id)) %>%
  select(course_id, 
         teacher_id, 
         question_no, 
         no_participants, 
         resp_share, 
         SET_score_avg, 
         percent_failed_cur, 
         academic_degree, 
         seniority, 
         sex)

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

lab 3 question 5

```{r}
#| label: r-3-example


teacher_evals_clean <- my_data %>%
  rename(sex = gender) %>%
  filter(no_participants >= 10) %>%
  mutate(course_id = as.character(course_id),
         teacher_id = as.character(teacher_id)) %>%
  select(course_id, 
         teacher_id, 
         question_no, 
         no_participants, 
         resp_share, 
         SET_score_avg, 
         percent_failed_cur, 
         academic_degree, 
         seniority, 
         sex)

```

-   Example of function stops

Lab 7 question 4

*I revised this code by assigning the x min and max to a variable. This reduced the amount of times I called the min() function. I learned that when using the same function multiple times, you should try to reduce the amount of times you use it.*

```{r}
#| label: r-3-function-stops


rescale_01 <- function(x) {
  if (!is.numeric(x)) stop("Input vector must be numeric.")
  if (length(x) <= 1) stop("Input vector must have more than one element.")
  
  x_min <- min(x, na.rm = TRUE)
  x_max <- max(x, na.rm = TRUE)
  
  (x - x_min) / (x_max - x_min)
}

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

lab 2 question 4

```{r}
#| label: dvs-1-num


ggplot(data = my_data,
       mapping = aes(x=weight, y=hindfoot_length)) +
  facet_wrap(~ species) +
  geom_point(alpha=0.5) + 
  labs(title = "Weight vs Hindfoot Length",
       x = "Weight (g)",
       y = "",
       subtitle = "Hindfoot Length (mm)")

```

-   at least one numeric variable and one categorical variable

lab 2 question 8

```{r}
#| label: dvs-2-num-cat

ggplot(data = my_data,
       mapping = aes(x=species, y=weight)) +
  geom_density_r +
  geom_jitter(aes(color = species), alpha = 0.5) +
  labs(title="Distribution of Weight Across Species",
       x = "Species",
       y = "Weight (g)") +
  theme(axis.text.x = element_text(angle = 45))
```

-   at least two categorical variables

lab 4 question 6

*This code was revised to connect the data pipeline and ggplot. Both times two categorical variables were correctly plotted.*

```{r}
#| label: dvs-2-cat


ca_childcare %>%
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool), 
               names_to = "age_group", 
               values_to = "median_price") %>%
  mutate(age_group = fct_recode(age_group,
                                 "Infants" = "mc_infant",
                                 "Toddlers" = "mc_toddler",
                                 "Preschoolers" = "mc_preschool")) %>%
  mutate(age_group = fct_relevel(age_group, "Infants", "Toddlers", "Preschoolers")) %>%
  ggplot(aes(x = study_year, y = median_price, color = region)) +
  geom_line() +
  geom_point() +
  geom_smooth(method = "loess", se = FALSE) +
  facet_wrap(~ age_group, ncol = 3) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       subtitle = "Median Price",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_y_continuous(limits = c(100, 500)) + 
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  theme_bw() +
  theme(axis.text.x = element_text(size = 6))

```

-   dates (timeseries plot)

lab 4 question 6

*This code was revised to join the data pipeline and ggplot. Both times a timeseries was plot*

```{r}
#| label: dvs-2-date


ca_childcare %>%
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool), 
               names_to = "age_group", 
               values_to = "median_price") %>%
  mutate(age_group = fct_recode(age_group,
                                 "Infants" = "mc_infant",
                                 "Toddlers" = "mc_toddler",
                                 "Preschoolers" = "mc_preschool")) %>%
  mutate(age_group = fct_relevel(age_group, "Infants", "Toddlers", "Preschoolers")) %>%
  ggplot(aes(x = study_year, y = median_price, color = region)) +
  geom_line() +
  geom_point() +
  geom_smooth(method = "loess", se = FALSE) +
  facet_wrap(~ age_group, ncol = 3) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       subtitle = "Median Price",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_y_continuous(limits = c(100, 500)) + 
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  theme_bw() +
  theme(axis.text.x = element_text(size = 6))
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

lab 4 question 6

*This code was revised. both times a subtitle was used rather than a y axis label to prevent heads from tilting.*

```{r}
#| label: dvs-2-1

ca_childcare %>%
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool), 
               names_to = "age_group", 
               values_to = "median_price") %>%
  mutate(age_group = fct_recode(age_group,
                                 "Infants" = "mc_infant",
                                 "Toddlers" = "mc_toddler",
                                 "Preschoolers" = "mc_preschool")) %>%
  mutate(age_group = fct_relevel(age_group, "Infants", "Toddlers", "Preschoolers")) %>%
  ggplot(aes(x = study_year, y = median_price, color = region)) +
  geom_line() +
  geom_point() +
  geom_smooth(method = "loess", se = FALSE) +
  facet_wrap(~ age_group, ncol = 3) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       subtitle = "Median Price",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_y_continuous(limits = c(100, 500)) + 
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  theme_bw() +
  theme(axis.text.x = element_text(size = 6))

```

-   I can modify the text in my plot to be more readable

lab 4 question 6

*Code was revised I changed the size of the x axis labels text to be able to read it.*

```{r}
#| label: dvs-2-2

ca_childcare %>%
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool), 
               names_to = "age_group", 
               values_to = "median_price") %>%
  mutate(age_group = fct_recode(age_group,
                                 "Infants" = "mc_infant",
                                 "Toddlers" = "mc_toddler",
                                 "Preschoolers" = "mc_preschool")) %>%
  mutate(age_group = fct_relevel(age_group, "Infants", "Toddlers", "Preschoolers")) %>%
  ggplot(aes(x = study_year, y = median_price, color = region)) +
  geom_line() +
  geom_point() +
  geom_smooth(method = "loess", se = FALSE) +
  facet_wrap(~ age_group, ncol = 3) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       subtitle = "Median Price",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_y_continuous(limits = c(100, 500)) + 
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  theme_bw() +
  theme(axis.text.x = element_text(size = 6))

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3



```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

Challenge 2 question 2

```{r}
#| label: dvs-3-1

surveys |> 
  ggplot(aes(x = weight, y = species, color = genus)) +
  geom_boxplot() +
  scale_color_manual(values = cdPalette_grey) +
  labs(x = "Weight (g)", y = "", subtitle = "Species", legend = "Genus")

```

-   I can use annotations

Challenge 2 hot

```{r}
#| label: dvs-3-2


ggplot(data = surveys, 
       mapping = aes(y = species,
                     x = weight,
                     color = genus)) +
  geom_boxplot() +
  scale_color_manual(values = cdPalette_grey) + 
  annotate("text", y = 1, x = 250, label = "Neotoma") +
  annotate("text", y = 2, x = 250, label = "Chaetodipus") +
  annotate("text", y = 3, x = 250, label = "Peromyscus") +
  annotate("text", y = 4, x = 250, label = "Perognathus") +
  annotate("text", y = 5, x = 250, label = "Reithrodontomys") +
  annotate("text", y = 6, x = 250, label = "Sigmodon") +
  annotate("text", y = 7, x = 250, label = "Onychomys") +
  annotate("text", y = 8, x = 250, label = "Peromyscus") +
  annotate("text", y = 9, x = 250, label = "Reithrodontomys") +
  annotate("text", y = 10, x = 250, label = "Dipodomys") +
  annotate("text", y = 11, x = 250, label = "Dipodomys") +
  annotate("text", y = 12, x = 250, label = "Chaetodipus") +
  annotate("text", y = 13, x = 250, label = "Dipodomys") +
  annotate("text", y = 14, x = 250, label = "Onychomys") +
  theme(legend.position = "none") +
  labs(x = "Weight (g)",
       y = "",
       subtitle = "Species",
       title = "Rodent Weight by Species")

```

-   I can be creative...

lab 2 question 8

```{r}
#| label: dvs-3-3


ggplot(data = my_data,
       mapping = aes(x=species, y=weight)) +
  geom_density_r +
  geom_jitter(aes(color = species), alpha = 0.5) +
  labs(title="Distribution of Weight Across Species",
       x = "Species",
       y = "Weight (g)") +
  theme(axis.text.x = element_text(angle = 45))

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

lab 4 question 5

```{r}
#| label: dvs-4-summarize

lowest_childcare_price <- ca_childcare %>%
  filter(study_year == 2018) %>%
  group_by(region) %>%
  summarise(median_price = median(mc_infant, na.rm = TRUE)) %>%
  arrange(median_price)
```

-   Example using `across()`

Lab 7 question 1

```{r}
#| label: dvs-4-across

summary_table <- blackfootfish |> 
  summarise(
    All_Rows_With_Missing_Values = sum(if_any(everything(), is.na)),
    across(everything(), ~ sum(is.na(.)), .names = "{.col}_missing")
  )

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

lab 3 question 10

*i revised this code because previously I only selected one row equal to the highest and one equal to lowest - not all equal to either highest or lowest*

```{r}
#| label: dvs-5-1


teacher_evals_clean %>%
  filter(question_no == 901) %>%
  group_by(teacher_id) %>%
  summarise(avg_rating = mean(SET_score_avg, na.rm = TRUE)) %>%
  arrange(desc(avg_rating)) %>%
  filter(avg_rating %in% c(max(avg_rating),min(avg_rating)))

```

-   Example 2

lab 4 question 4

```{r}
#| label: dvs-5-2

income_change <- ca_childcare %>%
  filter(study_year %in% c(2008, 2018)) %>%
  group_by(region, study_year) %>%
  summarise(median_income = median(mhi_2018, na.rm = TRUE)) %>%
  pivot_wider(names_from = study_year, values_from = median_income, names_prefix = "year_") %>%
  arrange(desc(year_2018))

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

lab 4 question 4

```{r}
#| label: dvs-6-1


income_change <- ca_childcare %>%
  filter(study_year %in% c(2008, 2018)) %>%
  group_by(region, study_year) %>%
  summarise(median_income = median(mhi_2018, na.rm = TRUE)) %>%
  pivot_wider(names_from = study_year, values_from = median_income, names_prefix = "year_") %>%
  arrange(desc(year_2018))

```

-   Example 2

lab 3 question 6

*I revised the code by correctly using n_distinct() this time.*

```{r}
#| label: dvs-6-2

teacher_evals_clean %>%
  summarise(n_distinct(teacher_id),
            n_distinct(course_id))

```

**DVS-7: I show creativity in my tables.**

-   Example 1

Lab 8 Question 3

*I revised my code for this problem by getting rid of the rename function and doing renaming within the select function. I learned that the select function is able to carry out both tasks of renaming and reorder.*

```{r}
#| label: dvs-7-1


final_table <- evals %>%
  distinct(teacher_id, .keep_all = TRUE) %>%
  mutate(sen_level = ifelse(seniority <= 4, "Junior (4 years or less)", "Senior (more than 4 years)")) %>%
  pivot_longer(cols = c(sex, sen_level, academic_degree), names_to = "category", values_to = "value") %>%
  count(category, value) %>%
  pivot_wider(names_from = value, values_from = n, values_fill = 0) %>%
  select(Female = female, Male = male, `Junior (4 years or less)`, `Senior (more than 4 years)`, `No Degree` = no_dgr, masters = ma, Doctorate = dr, Professor = prof) %>%
  summarise(across(everything(), sum))

final_table %>%
  kable(
    format = "html",
    col.names = c("Female", "Male", "Junior", "Senior", "No Degree", "Masters", "Doctorate", "Professor"),
    caption = "Demographics Summary Table"
  )

```

-   Example 2

Lab 8 Question 4

```{r}
#| label: dvs-7-2

missing_values_table <- map_int(fish, ~ sum(is.na(.))) %>%
  enframe(name = "variable", value = "missing_count")

missing_values_table %>%
  kable(
    format = "html",
    col.names = c("variable", "missing_count"),
    caption = "Missing Values"
  )

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

Lab 3 question 8

```{r}
#| label: pe-1-one-call


teacher_evals_clean %>%
  distinct(teacher_id, academic_degree, seniority, sex) %>%
  group_by(academic_degree, seniority, sex) %>%
  summarise(count = n()) %>%
  arrange(desc(count))

```

-   `across()`

Lab 7 Question 1

```{r}
#| label: pe-1-across


summary_table <- blackfootfish |> 
  summarise(
    All_Rows_With_Missing_Values = sum(if_any(everything(), is.na)),
    across(everything(), ~ sum(is.na(.)), .names = "{.col}_missing")
  )

```

-   `map()` functions

Practice Activity 8 "Test your functions"

```{r}
#| label: pe-1-map-1

map_chr(.x = xmas$gift_item, 
        .f = ~ pluralize_gift(gift = .x)
        )


```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

Practice Activity 7 Question 2

```{r}
#| label: pe-2-1


divide_and_round <- function(vec){
  vec <- vec / min(vec, na.rm = TRUE)
  round(vec)
}

```

-   Function that operates on data frames

Lab 7 Question 8

*I revised my answer by changing my function from using a for loop to a vectorized function. I grew my understanding of vectorized functions can be used instead of for loops to apply apply the same function to multiple columns*

```{r}
#| label: pe-2-2

rescale_column <- function(data, var_names) {
  data <- data %>%
    mutate(across(all_of(var_names), rescale_01))
  return(data)
}

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

summary_table <- blackfootfish |> 
  summarise(
    All_Rows_With_Missing_Values = sum(if_any(everything(), is.na)),
    across(everything(), ~ sum(is.na(.)), .names = "{.col}_missing")
  )

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

Practice Activity 9 Question 7

```{r}
#| label: pe-3-map-1


my_weights <- map_dbl(.x = 1:1000, 
                      .f = ~ music_man(n_tromb = 76, n_cor = 110, n_reed = 1035)
                      )

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

Practice Activity 8 "Test your function"

```{r}
#| label: pe-3-map-2

xmas <- xmas |> 
  mutate(full_phrase = pmap_chr(.l = list(day_num   = day,
                                          adjective = adjective, 
                                          gift      = gift_item, 
                                          verb      = verb, 
                                          location  = location
                                          ), 
                                .f = make_phrase
                                )
         )

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

lab 5

```{r}
#| label: pe-4-1

second_witness <- person %>%
  filter(address_street_name == "Franklin Ave", grepl("Annabel", name))

```

-   I can connect a data wrangling pipeline into a `ggplot()`

lab 4 question 6

*i revised this code to join the data wrangling pipeline with the ggplot()*

```{r}
#| label: pe-4-2


ca_childcare %>%
  pivot_longer(cols = c(mc_infant, mc_toddler, mc_preschool), 
               names_to = "age_group", 
               values_to = "median_price") %>%
  mutate(age_group = fct_recode(age_group,
                                 "Infants" = "mc_infant",
                                 "Toddlers" = "mc_toddler",
                                 "Preschoolers" = "mc_preschool")) %>%
  mutate(age_group = fct_relevel(age_group, "Infants", "Toddlers", "Preschoolers")) %>%
  ggplot(aes(x = study_year, y = median_price, color = region)) +
  geom_line() +
  geom_point() +
  geom_smooth(method = "loess", se = FALSE) +
  facet_wrap(~ age_group, ncol = 3) +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       subtitle = "Median Price",
       x = "Study Year",
       y = "",
       color = "California Region") +
  scale_y_continuous(limits = c(100, 500)) + 
  scale_x_continuous(breaks = seq(2008, 2018, by = 2)) +
  theme_bw() +
  theme(axis.text.x = element_text(size = 6))

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

Practice Activity 9

```{r}
#| label: dsm-1-1

sum(rnorm(100, mean = 4.6, sd = 0.8) < 4)

```

-   Example 2

Practice Activity 9

```{r}
#| label: dsm-1-2


my_weights <- map_dbl(.x = 1:1000, 
                      .f = ~ music_man(n_tromb = 76, n_cor = 110, n_reed = 1035)
                      )

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

lab 4 question 8

```{r}
#| label: dsm-2-1


reg_mod1 <- lm(mc_infant ~ mhi_2018, data = ca_childcare)
```

-   Example 2

challenge 3 question 3

```{r}
#| label: dsm-2-2

chi_test <- chisq.test(table(teacher_evals_compare$SET_level, teacher_evals_compare$sen_level))

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

I revised my thinking on the code examples provided in my portfolio by revisiting old problems and editing my code to better/correctly solve the question. To find examples to put in my portfolio I often had to revise problems and correctly use a tool or do something that I hadn't the first time. I had to revise my thinking and re think about a problem and how to do it in a better way. I would then carry this new found knowledge onto other problems.

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

Code that had been revised is noted with a message in italics

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

I extended my thinking throughout the course by pushing myself to complete problems. When completeing hard problems, I would think them through before jumping directly into coding. I extended my thinking on code examples provided in my portfolio by having to revist old problems and correct them. I would then incorporate what i learned into future assignments and problems.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

"Code looks really good. It is tidy and efficient. Your spacing and use of white space is good and consistent. The only place where I think you can improve is sometimes you put one space and other times you put two spaces between the end of a line of code and the pipe operator."

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

I grew as a collaborator by working together with my partners during practice activities. I had never partner programmed before so I learned how to effectively communicate with others. When I first collaborated with a partner it was a bit awkward, but now when working together with someone I'm able to complete assignments with ease. I am always patient and respectful when collaborating. I make an effort to follow coder and developer roles by using excellent communication and discussing new ideas.
