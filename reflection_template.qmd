---
title: "STAT 331 Portfolio"
author: "Jonathan Zimmer"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv

#from lab 2 question 1

my_data <- read_csv("data/surveys.csv")

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

```

-   `txt`

```{r}
#| label: wd-1-txt

```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2

#lab 3 question 5

teacher_evals_clean <- my_data %>%
  rename(sex = gender) %>%
  filter(no_participants >= 10) %>%
  mutate(course_id = as.character(course_id),
         teacher_id = as.character(teacher_id)) %>%
  select(course_id, teacher_id, question_no, no_participants, resp_share, 
         SET_score_avg, percent_failed_cur, academic_degree, seniority, sex)

```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric

#lab 3 question 9

teacher_evals_clean %>%
  group_by(course_id, teacher_id) %>%
  summarise(n_questions = n_distinct(question_no)) %>%
  filter(n_questions == 9)

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

```

-   factor

```{r}
#| label: wd-3-factor

#lab 3 question 12

teacher_evals_clean %>%
  filter(sex == "female", academic_degree %in% c("dr", "prof")) %>%
  group_by(teacher_id) %>%
  summarise(avg_resp_share = mean(resp_share, na.rm = TRUE)) %>%
  arrange(desc(avg_resp_share)) %>%
  slice(c(1, n()))  # Highest and lowest

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric

#lab 3 question 5

teacher_evals_clean <- my_data %>%
  rename(sex = gender) %>%
  filter(no_participants >= 10) %>%
  mutate(course_id = as.character(course_id),
         teacher_id = as.character(teacher_id)) %>%
  select(course_id, teacher_id, question_no, no_participants, resp_share, 
         SET_score_avg, percent_failed_cur, academic_degree, seniority, sex)

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor

#lab 4 question 3

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |>
  mutate(region = fct_collapse(county_name,
                               # Region 1: Superior California
                               "Superior California" = c("Butte", "Colusa", "El Dorado", "Glenn", "Lassen", "Modoc", "Nevada", "Placer", "Plumas", "Sacramento", "Shasta", "Sierra", "Siskiyou", "Sutter", "Tehama", "Yolo", "Yuba"),
                               # Region 2: Del Norte, Humboldt, Lake, Mendocino, Napa, Sonoma, Trinity
                               "Del Norte and Northern Coast" = c("Del Norte", "Humboldt", "Lake", "Mendocino", "Napa", "Sonoma", "Trinity"),
                               # Region 3: San Francisco Bay Area
                               "San Francisco Bay Area" = c("Alameda", "Contra Costa", "Marin", "San Francisco", "San Mateo", "Santa Clara", "Solano"),
                               # Region 4: Northern San Joaquin Valley and Sierra
                               "Northern San Joaquin Valley" = c("Alpine", "Amador", "Calaveras", "Madera", "Mariposa", "Merced", "Mono", "San Joaquin", "Stanislaus", "Tuolumne"),
                               # Region 5: Central Coast
                               "Central Coast" = c("Monterey", "San Benito", "San Luis Obispo", "Santa Barbara", "Santa Cruz", "Ventura"),
                               # Region 6: Central Valley
                               "Central Valley" = c("Fresno", "Inyo", "Kern", "Kings", "Tulare"),
                               # Region 7: Inland Empire
                               "Inland Empire" = c("Riverside", "San Bernardino"),
                               # Region 8: Los Angeles
                               "Los Angeles" = c("Los Angeles"),
                               # Region 9: Orange
                               "Orange" = c("Orange"),
                               # Region 10: San Diego and Imperial
                               "San Diego Area" = c("Imperial", "San Diego")
  ))

```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left

#lab 4 question 2

ca_childcare <- childcare_costs %>%
  left_join(counties, by = c("county_fips_code" = "county_fips_code")) %>%
  filter(state_name == "California") %>%
  select(county_fips_code, study_year, mhi_2018, mc_infant, mc_toddler, mc_toddler, mc_preschool,
         names(counties))

```

-   `right_join()`

```{r}
#| label: wd-5-right

```

-   `inner_join()`

```{r}
#| label: wd-5-inner

```

-   `full_join()`

```{r}
#| label: wd-5-full

#lab 5 question 1

mastermind <- person %>%
  inner_join(drivers_license, by = c("license_id" = "id")) %>%
  inner_join(facebook_event_checkin, by = c("id" = "person_id")) %>%
  filter(gender == "female", hair_color == "red", car_make == "Tesla", 
         car_model == "Model S", event_name == "SQL Symphony Concert")

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

#lab 2 question 4

ggplot(data = my_data,
       mapping = aes(x=weight, y=hindfoot_length)) +
  facet_wrap(~ species) +
  geom_point(alpha=0.5) + 
  labs(title = "Weight vs Hindfoot Length",
       x = "Weight (g)",
       y = "",
       subtitle = "Hindfoot Length (mm)")

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

#lab 3 question 5

teacher_evals_clean <- my_data %>%
  rename(sex = gender) %>%
  filter(no_participants >= 10) %>%
  mutate(course_id = as.character(course_id),
         teacher_id = as.character(teacher_id)) %>%
  select(course_id, teacher_id, question_no, no_participants, resp_share, 
         SET_score_avg, percent_failed_cur, academic_degree, seniority, sex)

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example

```

-   Example of function stops

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num

#lab 2 question 4

ggplot(data = my_data,
       mapping = aes(x=weight, y=hindfoot_length)) +
  facet_wrap(~ species) +
  geom_point(alpha=0.5) + 
  labs(title = "Weight vs Hindfoot Length",
       x = "Weight (g)",
       y = "",
       subtitle = "Hindfoot Length (mm)")

```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

#lab 2 question 8

ggplot(data = my_data,
       mapping = aes(x=species, y=weight)) +
  geom_density_r +
  geom_jitter(aes(color = species), alpha = 0.5) +
  labs(title="Distribution of Weight Across Species",
       x = "Species",
       y = "Weight (g)") +
  theme(axis.text.x = element_text(angle = 45))
```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date


```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1

#challenge 2 question 2

surveys |> 
  ggplot(aes(x = weight, y = species, color = genus)) +
  geom_boxplot() +
  scale_color_manual(values = cdPalette_grey) +
  labs(x = "Weight (g)", y = "", subtitle = "Species", legend = "Genus")

```

-   I can use annotations

```{r}
#| label: dvs-3-2

```

-   I can be creative...

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

#lab 4 question 4

income_change <- ca_childcare %>%
  filter(study_year %in% c(2008, 2018)) %>%
  group_by(region, study_year) %>%
  summarise(median_income = median(mhi_2018, na.rm = TRUE)) %>%
  pivot_wider(names_from = study_year, values_from = median_income, names_prefix = "year_") %>%
  arrange(desc(year_2018))

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1

```

-   Example 2

```{r}
#| label: dvs-6-2



```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

```

-   Example 2

```{r}
#| label: dvs-7-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   `across()`

```{r}
#| label: pe-1-across

```

-   `map()` functions

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

#lab 4 question 8

reg_mod1 <- lm(mc_infant ~ mhi_2018, data = ca_childcare)
```

-   Example 2

```{r}
#| label: dsm-2-2

#challenge 3 question 3

chi_test <- chisq.test(table(teacher_evals_compare$SET_level, teacher_evals_compare$sen_level))

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
