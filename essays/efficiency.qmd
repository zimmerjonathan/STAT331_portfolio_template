---
title: "The Power of Efficiency"
format: html
editor: visual
---

As we've said in the class efficiency is a pivotal component of statistical computing (and data science). In this essay, give an explanation of what that term "efficiency" means in relation to statistical computing and describe some places where you encountered efficiency and understood its importance. Your essay should address the following questions:

-   What is the definition of "efficiency"?

-   What does efficiency look like in statistical computing / data science?

-   What does efficiency allow you to do?

-   Why is efficiency important?

-   Where did you encounter efficiency, and what were some ["a-ha" moments](https://www.merriam-webster.com/dictionary/aha%20moment) you had about efficiency? (For the latter, tie each a-ha moment to an artifact in the portfolio.)

Efficiency in relation to statistical computing refers to performing tasks using the least amount of computational resources while still maintaining correct results. Efficiency can also mean using the least amount of lines of code necessary, creating functions to reduce repetitive code, and filtering unnecessary data early. Efficiency allows you to correctly complete problems quicker and neater. Additionally, writing efficient code is important when handling large datasets to reduce the run time of programs. This enables data scientists to create work that others can easily follow and reproduce themselves. Efficiency is important because it saves time and resources, improves scalilability, and ensures reproducibility. My greatest a-ha moment was working with vectorization in R, rather than iterating through elements using a for loop. Having programmed in other languages, this was a newer concept to me and showed me how R can be used to increase efficiency.

Below is a function I wrote for practice activity 7 question 7. It showcases using vectorized functions to improve efficiency rather than using for loops.

```{r}
every_other <- function(vec, start = 1){
  if(start == 2){
    vec[seq(2, length(vec), by = 2)]
  } else if(start == 1) {
    vec[seq(1, length(vec), by = 2)]
  } 
}
```
